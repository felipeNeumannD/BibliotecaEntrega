Create table pessoa (
	id_pessoa SERIAL primary key,
	nome varchar(40) not null,
	senhar varchar(15) not null,
	email varchar(40) Unique,
	cpf varchar(15) Unique,
	celular varchar(14) not null
);


Create table livro (
	id_livro SERIAL primary key,
	nome varchar(40) not null,
	paginas int,
              alugado boolean
);

create table aluguel(
	id_aluguel Serial primary key,
	data_inicial date,
	data_entrega date,
	id_pessoa int,
	id_livro int,
	FOREIGN KEY (id_pessoa) REFERENCES pessoa(id_pessoa),
	FOREIGN KEY (id_livro) REFERENCES livro(id_livro)
);




Trigger acionada ao retirar um livro


CREATE OR REPLACE FUNCTION fn_atualiza_status_livro()
RETURNS TRIGGER AS $$
BEGIN
    UPDATE livro SET alugado = true WHERE id_livro = NEW.id_livro;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;


CREATE TRIGGER trg_atualiza_status_livro
AFTER INSERT ON aluguel
FOR EACH ROW
EXECUTE FUNCTION fn_atualiza_status_livro();




Trigger acionada ao devolver um livro

CREATE OR REPLACE FUNCTION atualizar_status_livro_2()
RETURNS TRIGGER AS
$$
BEGIN
    IF NEW.data_entrega IS NOT NULL THEN
        UPDATE livro
        SET alugado = false
        WHERE id_livro = NEW.id_livro;
    END IF;
    RETURN NEW;
END;
$$
LANGUAGE plpgsql;

CREATE TRIGGER trigger_atualizar_status_livro_devolucao
AFTER UPDATE OF data_entrega ON aluguel
FOR EACH ROW
EXECUTE FUNCTION atualizar_status_livro_2();
